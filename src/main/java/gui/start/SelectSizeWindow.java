package gui.start;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import gui.extra.HelpJMenu;
import gui.extra.ThemeManagerJMenu;
import manager.*;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionListener;
import java.lang.reflect.Method;
import java.util.ResourceBundle;

public class SelectSizeWindow extends JFrame implements ISetSizeWindow {

    private static int lastGamePanel = 0;
    private static int xSizeLastValue = 8;
    private static int ySizeLastValue = 8;
    private final ThemeManagerJMenu themeManagerJMenu;
    private JPanel rootPanel;
    private JTabbedPane tabbedPane;
    private JPanel MineSweeper8x8;
    private JPanel MineSweeper16x16;
    private JPanel customMineSweeper;
    private JButton play8x8;
    private JButton play16x16;
    private JPanel customJPanel;
    private JButton playCustom;
    private JPanel valuesJPanel;
    private JPanel playCustomPanel;
    private JSpinner xSize;
    private JSpinner ySize;
    private JLabel X;
    private JPanel playJPanel8;
    private JPanel playJPanel16;
    private JLabel gameIcon;
    private JPanel iconJpanel;
    private JList scoreboardList;
    private JPanel scoreboardJpanel;
    private JCheckBoxMenuItem toggleSound;

    public SelectSizeWindow() {
        add(rootPanel);

        xSize.setModel(new SpinnerNumberModel(xSizeLastValue, 8, 32, 1));
        ySize.setModel(new SpinnerNumberModel(ySizeLastValue, 8, 32, 1));

        tabbedPane.setSelectedIndex(lastGamePanel);


        scoreboardList.setListData(Scoreboard.getScoreboard());

        gameIcon.setIcon(new ImageIcon(Loader.getResourceURL(Loader.Icon.SMALLAPPICON)));

        JMenuBar jMenuBar = new JMenuBar();
        themeManagerJMenu = new ThemeManagerJMenu();
        toggleSound = new JCheckBoxMenuItem(Language.getResourceBundle().getString("ToggleSound"));
        toggleSound.setState(Jukebox.canPlayMusic());
        JMenu game = new JMenu(Language.getResourceBundle().getString("Game"));
        game.add(toggleSound);
        jMenuBar.add(game);
        jMenuBar.add(themeManagerJMenu);
        jMenuBar.add(new HelpJMenu());

        setJMenuBar(jMenuBar);

        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setTitle(Loader.getAPPNAME());
        setName(Loader.getAPPNAME());

        if (!Platform.isHostOSMac()) {
            setIconImage(new ImageIcon(Loader.getResourceURL(Loader.Icon.APPICON)).getImage());
        }

        pack();
        setLocationRelativeTo(null);
        setResizable(false);
        setVisible(true);
    }

    @Override
    public int getxSize() {
        return (Integer) xSize.getValue();
    }

    @Override
    public int getySize() {
        return (Integer) ySize.getValue();
    }

    @Override
    public void setListener(ActionListener listener) {
        play8x8.addActionListener(listener);
        play16x16.addActionListener(listener);
        playCustom.addActionListener(listener);
        toggleSound.addActionListener(listener);

        play8x8.setActionCommand(SetSizeListener.EIGHT);
        play16x16.setActionCommand(SetSizeListener.SIXTEEN);
        playCustom.setActionCommand(SetSizeListener.CUSTOM);
        toggleSound.setActionCommand(SetSizeListener.TOGGLESOUND);

        themeManagerJMenu.setActionListener(listener);
    }

    @Override
    public void updateComponentTree() {
        SwingUtilities.updateComponentTreeUI(this);
        pack();
    }

    @Override
    public void setMenuSoundToggle(boolean state) {
        toggleSound.setState(state);
    }

    @Override
    public void dispose() {
        lastGamePanel = tabbedPane.getSelectedIndex();
        xSizeLastValue = getxSize();
        ySizeLastValue = getySize();
        super.dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane = new JTabbedPane();
        tabbedPane.setTabPlacement(1);
        rootPanel.add(tabbedPane, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        MineSweeper8x8 = new JPanel();
        MineSweeper8x8.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        tabbedPane.addTab(this.$$$getMessageFromBundle$$$("properties/MineSweeper", "Easy"), MineSweeper8x8);
        playJPanel8 = new JPanel();
        playJPanel8.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        MineSweeper8x8.add(playJPanel8, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        play8x8 = new JButton();
        this.$$$loadButtonText$$$(play8x8, this.$$$getMessageFromBundle$$$("properties/minesweeper", "Jugar"));
        playJPanel8.add(play8x8, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        MineSweeper16x16 = new JPanel();
        MineSweeper16x16.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        tabbedPane.addTab(this.$$$getMessageFromBundle$$$("properties/MineSweeper", "Medium"), MineSweeper16x16);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        MineSweeper16x16.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        playJPanel16 = new JPanel();
        playJPanel16.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(playJPanel16, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        play16x16 = new JButton();
        this.$$$loadButtonText$$$(play16x16, this.$$$getMessageFromBundle$$$("properties/minesweeper", "Jugar"));
        playJPanel16.add(play16x16, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        customMineSweeper = new JPanel();
        customMineSweeper.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        tabbedPane.addTab(this.$$$getMessageFromBundle$$$("properties/MineSweeper", "Custom"), customMineSweeper);
        customJPanel = new JPanel();
        customJPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        customMineSweeper.add(customJPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        valuesJPanel = new JPanel();
        valuesJPanel.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 10, 0), -1, -1));
        customJPanel.add(valuesJPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        X = new JLabel();
        X.setText("<html><font size=5>X</font></html>");
        valuesJPanel.add(X, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        xSize = new JSpinner();
        valuesJPanel.add(xSize, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ySize = new JSpinner();
        valuesJPanel.add(ySize, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playCustomPanel = new JPanel();
        playCustomPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        customJPanel.add(playCustomPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        playCustom = new JButton();
        this.$$$loadButtonText$$$(playCustom, this.$$$getMessageFromBundle$$$("properties/minesweeper", "Jugar"));
        playCustomPanel.add(playCustom, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scoreboardJpanel = new JPanel();
        scoreboardJpanel.setLayout(new GridLayoutManager(1, 1, new Insets(10, 0, 10, 0), -1, -1));
        rootPanel.add(scoreboardJpanel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        scoreboardJpanel.setBorder(BorderFactory.createTitledBorder(null, this.$$$getMessageFromBundle$$$("properties/MineSweeper", "Scoreboard"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        scoreboardList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        scoreboardList.setModel(defaultListModel1);
        scoreboardJpanel.add(scoreboardList, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        iconJpanel = new JPanel();
        iconJpanel.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 0), -1, -1));
        rootPanel.add(iconJpanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        gameIcon = new JLabel();
        gameIcon.setText("");
        iconJpanel.add(gameIcon, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
